class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            if self.rank[root_x] < self.rank[root_y]:
                self.parent[root_x] = root_y
            elif self.rank[root_x] > self.rank[root_y]:
                self.parent[root_y] = root_x
            else:
                self.parent[root_y] = root_x
                self.rank[root_x] += 1

def k_clusters(points, k):
    n = len(points)

    if k >= n:
        # Caso especial: se k for maior ou igual ao número de pontos, retorne cada ponto individualmente
        return [[point] for point in points]

    # Crie uma lista de arestas com distâncias entre os pontos
    edges = []
    for i in range(n):
        for j in range(i + 1, n):
            distance = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5
            edges.append((i, j, distance))

    # Ordene as arestas em ordem crescente de distância
    edges.sort(key=lambda x: x[2])

    # Inicialize conjuntos disjuntos para os pontos
    uf = UnionFind(n)

    # Número de clusters formados até agora
    num_clusters = n
    clusters = []

    # Execute o algoritmo de Kruskal com uma condição de parada personalizada
    for u, v, distance in edges:
        if uf.find(u) != uf.find(v):
            uf.union(u, v)
            num_clusters -= 1

        # Se atingirmos o número desejado de clusters, pare
        if num_clusters == k:
            break

    # Crie os clusters finais
    for i in range(n):
        clusters.append([])

    for i in range(n):
        root = uf.find(i)
        clusters[root].append(points[i])

    # Remova clusters vazios e retorne os K clusters
    non_empty_clusters = [cluster for cluster in clusters if cluster]
    return non_empty_clusters

# Exemplo de uso:
points = [(0, 0), (1, 1), (2, 2), (8, 8), (9, 9), (10, 10)]
k = 3  # Número de clusters desejados
result = k_clusters(points, k)

# Imprima os clusters
for i, cluster in enumerate(result):
    print(f"Cluster {i + 1}: {cluster}")